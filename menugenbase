#!/usr/bin/env bash

# Internal values
declare -ga PREVMENU=("")
declare -ga PREVNAME=("")
CURRENTMENU="main" # Keeps track of the current menu
HASH="" # MD5 hash of current menu text for searching MENU data structures
SCRIPTNAME="$1"

# Special vars defined for each menu
declare -ga ITEMID
declare -gA ITEMNAME
declare -gA ITEMTYPE
declare -gA ITEMLINK
declare -gA ITEMACTION
name=""
prompt=""
numbered=true
autoselect=false
back=true
default_link=""
default_exec=""

# A simple wrapper to echo to stderr
function echoerr() {
	echo "$@" 1>&2
}

# Test to see if a rendering function is provided
declare -f -F RENDERMENU >/dev/null
if [[ $? -eq 1 ]]; then
	echoerr "ERROR: menumaker-base cannot be run by itself."
	echoerr "       It must be provided a RENDERMENU function to work."
	echoerr "       Check menumaker and menumaker-cli for examples."
	exit -1
fi

# Function which creates a menu ITEM
# $1 - ITEM name
# $2 - Link location
# $3 - Action to perform on follow
function create_item() {
	HASH=$(echo "$1" | md5sum | cut -d' ' -f 1)
	# Check parameters
	if [[ "$#" -ne 3 ]]; then
		echoerr "ERROR: add_item requires 3 arguments (got $#)"
		echoerr "    - The name of the ITEM (value: \"$1\")"
		echoerr "    - The link location to the next menu (value: \"$2\")"
		echoerr "    - The action the ITEM will exec (value: \"$3\")"
		exit -1
	fi
	# Name CANNOT be blank
	if [[ "$1" == "" ]]; then
		echoerr "ERROR: ITEM name must not be blank!"
		exit -1
	fi
	# One of link or action MUST NOT be blank
	if [[ "$1" == "" && "$2" == "" ]]; then
		echoerr "ERROR: The ITEM must have either a link or an action"
		exit -1
	fi
	ITEMNAME["$HASH"]="$1"
	ITEMTYPE["$HASH"]="item"
	ITEMLINK["$HASH"]="$2"
	ITEMACTION["$HASH"]="$3"
}

# Function which adds ITEMs to the end of the menu
# $1 - ITEM name
# $2 - Link location
# $3 - Action to perform on follow
function add_item() {
	create_item "$1" "$2" "$3"
	ITEMID+=("$HASH")
}

# Function which adds ITEMs to the beginning of the menu
# $1 - ITEM name
# $2 - Link location
# $3 - Action to perform on follow
function cons_item() {
	create_item "$1" "$2" "$3"
	ITEMID=("$HASH" "${ITEMID[@]}")
}

# Function which creates a menu link
# $1 - link name
# $2 - Link location
function create_link() {
	HASH=$(echo "$1" | md5sum | cut -d' ' -f 1)
	# Check parameters
	if [[ "$#" -ne 2 ]]; then
		echoerr "ERROR: add_item requires 2 arguments (got $#)"
		echoerr "    - The name of the ITEM (value: \"$1\")"
		echoerr "    - The link location to the next menu (value: \"$2\")"
		exit -1
	fi
	# Name and the link CANNOT be blank
	if [[ "$1" == "" || "$2" == "" ]]; then
		echoerr "ERROR: Neither the name nor the link can be blank!"
		echoerr "    - Provided name: \"$1\""
		echoerr "    - Provided link: \"$2\""
		exit -1
	fi
	ITEMNAME["$HASH"]="$1"
	ITEMTYPE["$HASH"]="item"
	ITEMLINK["$HASH"]="$2"
	ITEMACTION["$HASH"]=""
}

# Function which adds a link to the end of the menu
# $1 - link name
# $2 - Link location
function add_link() {
	create_link "$1" "$2"
	ITEMID+=("$HASH")
}

# Function which adds links to the beginning of the menu
# $1 - link name
# $2 - Link location
function cons_link() {
	create_link "$1" "$2"
	ITEMID=("$HASH" "${ITEMID[@]}")
}

# Function which creates a menu action
# $1 - link name
# $2 - Action to exec
function create_exec() {
	HASH=$(echo "$1" | md5sum | cut -d' ' -f 1)
	# Check parameters
	if [[ "$#" -ne 2 ]]; then
		echoerr "ERROR: add_item requires 2 arguments (got $#)"
		echoerr "    - The name of the ITEM (value: \"$1\")"
		echoerr "    - The action to exec (value: \"$2\")"
		exit -1
	fi
	# Neither the name or the action can be blank
	if [[ "$1" == "" || "$2" == "" ]]; then
		echoerr "ERROR: Neither the name nor the link can be blank!"
		echoerr "    - Provided name: \"$1\""
		echoerr "    - Provided action: \"$2\""
		exit -1
	fi
	ITEMNAME["$HASH"]="$1"
	ITEMTYPE["$HASH"]="item"
	ITEMLINK["$HASH"]=""
	ITEMACTION["$HASH"]="$2"
}

# Function which adds actions to the end of the menu
# $1 - link name
# $2 - Action to exec
function add_exec() {
	create_exec "$1" "$2"
	ITEMID+=("$HASH")
}

# Function which adds actions to the beginning of the menu
# $1 - link name
# $2 - Action to exec
function cons_exec() {
	create_exec "$1" "$2"
	ITEMID=("$HASH" "${ITEMID[@]}")
}

# Function which adds BACK to the menu using menumaker's internal data structures
function create_back() {
	local item_text=""
	# No args provided, auto generate back item
	if [[ "$#" -eq 0 ]]; then
		if [[ "${PREVMENU[-1]}" == "" ]]; then
			item_text="< Exit"
		else
			item_text="< Back to ${PREVNAME[-1]}"
		fi
	fi
	HASH=$(echo "$item_text" | md5sum | cut -d' ' -f 1)
	ITEMNAME["$HASH"]="$item_text"
	ITEMTYPE["$HASH"]="back"
	ITEMLINK["$HASH"]="${PREVMENU[-1]}"
}

# Function which adds back to the end of the menu
function add_back() {
	create_back
	ITEMID+=("$HASH")
}

# Function which adds BACK to the beginning of the menu
function cons_back() {
	create_back
	ITEMID=("$HASH" "${ITEMID[@]}")
}

# Function which adds NOPs to the menu
# $1 - nop text
# TODO: maybe add the ability to make NOPs run commands
function create_nop() {
	if [[ "$#" -ne 1 ]]; then
		echoerr "ERROR: add_nop requires the item text"
		exit -1
	fi
	HASH=$(echo "$1" | md5sum | cut -d' ' -f 1)
	ITEMNAME["$HASH"]="$1"
	ITEMTYPE["$HASH"]="nop"
}

# Function which adds NOPs to the menu
# $1 - nop text
function add_nop() {
	create_nop "$1"
	ITEMID+=("$HASH")
}

# Function which adds NOPs to the menu
# $1 - nop text
function cons_nop() {
	create_nop "$1"
	ITEMID=("$HASH" "${ITEMID[@]}")
}

# Fucntion to test if the menu $1 is defined in the menu script
# Returns 0 if it exists, and -1 if it doesn't if isn't valid
# TODO: test if begin comes before end, whether begin pattern exists, and verify there is only one of each begin and end statement in the menuscript
function testForMenu() {
		menu="$1"

		# Test to make sure an end pattern exists, sed will just keep on chomping till the EOF otherwise
		grep "#end $menu" $SCRIPTNAME > /dev/null
		if [[ $? -ne 0 ]]; then
				echoerr "ERROR: Menu $menu is missing #end statement"
				return -1
		fi

		# See if a block exists
		ret=$(sed -n "/#begin $menu/,/#end $menu/p" $SCRIPTNAME | wc -l)
		if [[ $ret -eq 0 ]]; then
				echoerr "ERROR: Menu $menu doesn't exist"
				return -1
		fi
}

# Function to reset all the values to their defaults to keep the menu system working cleanly
function resetAllToDefault() {
	unset ITEMID
	unset ITEMNAME
	unset ITEMTYPE
	unset ITEMLINK
	unset ITEMACTION
	declare -ga ITEMID
	declare -gA ITEMNAME
	declare -gA ITEMTYPE
	declare -gA ITEMLINK
	declare -gA ITEMACTION
	HASH=""
	name=""
	prompt=""
	numbered=true
	autoselect=false
	back=true
	default_link=""
	default_exec=""
}

# Function to reset all the values to their defaults to keep the menu system working cleanly
function resetVarsToDefault() {
	HASH=""
	name=""
	prompt=""
	numbered=true
	autoselect=false
	back=true
	default_link=""
	default_exec=""
}

##
## MAIN PROGRAM
##

# Test the $1 script is provided
if [[ "$#" -lt 1 ]]; then
		echoerr "ERROR: menumaker requires a menumaker script as it's parameter"
		exit -1
fi
if [ ! -e "$SCRIPTNAME" ]; then
		echoerr "ERROR: The script \"$SCRIPTNAME\" does not exist"
		exit -1
fi

# Load the setup block to initialize the state
# Don't print errors if we don't need to
testForMenu "setup" 2>/dev/null
if [[ "$?" -eq 0 ]]; then
	source <(sed -n "/#begin setup/,/#end setup/p" $SCRIPTNAME)
fi

while [ "$CURRENTMENU" != "" ]; do
	ROFIMENU=""

	resetAllToDefault

	# Load current menu - abort the program if we can't find it
	testForMenu $CURRENTMENU
	if [[ "$?" -ne 0 ]]; then
		exit -1
	fi
	source <(sed -n "/#begin $CURRENTMENU/,/#end $CURRENTMENU/p" $SCRIPTNAME)

	# Add autogenerated back if necessary
	if [[ "$back" == true ]]; then
		cons_nop "---"
		cons_back
	fi

	# Generate a prompt if one does not exist
	if [[ "$prompt" == "" ]]; then
		prompt="$name > "
	fi

	# Convert menu items to string to render in rofi
	num=1
	for key in "${ITEMID[@]}"; do
		item="${ITEMNAME[$key]}"
		if [[ "${ITEMTYPE[$key]}" == item ]]; then
			if [[ $numbered == true ]]; then
				ROFIMENU+="$num $item\n"
				((num++))
			else
				ROFIMENU+="$item\n"
			fi
		else
			ROFIMENU+="$item\n"
		fi
	done

	# Run the specified selector! (Make sure to strip the trailing newline)
	result=$(RENDERMENU "$(printf "$ROFIMENU")" "$prompt" "$autoselect")

	# If nothing was returned, the user quit
	if [[ "$result" == "" ]]; then
		break
	else
		# Otherwise, remove the number if added
		if [[ $numbered == true ]]; then
			SELECTION=$(echo $result | sed -r 's/^[0-9]+ //g')
		else
			SELECTION=$result
		fi
		# Calculate the lookup key
		key=$(echo "$SELECTION" | md5sum | cut -d' ' -f 1)
		# Then lookup our next action
		if [[ "${ITEMTYPE["$key"]}" == "nop" ]]; then
			continue
		elif [[ "${ITEMTYPE["$key"]}" == "item" ]]; then
			if [[ "$back" == true ]]; then
				PREVMENU+=("$CURRENTMENU")
				PREVNAME+=("$name")
			fi
			# If the item has an action, run it
			if [[ "${ITEMACTION["$key"]}" != "" ]]; then
				eval "${ITEMACTION["$key"]}"
			fi
			CURRENTMENU=${ITEMLINK["$key"]}
		elif [[ "${ITEMTYPE["$key"]}" == "back" ]]; then
			CURRENTMENU=${PREVMENU[-1]}
			unset PREVMENU[${#PREVMENU[@]}-1]
			unset PREVNAME[${#PREVNAME[@]}-1]
		else
			if [[ "$SELECTION" != "" ]]; then
				# Custom command was input
				# Set up the next menu (if it's not set, i.e. empty, MM will exit)
				CURRENTMENU="$default_link"
				# Run the appropriate action
				if [[ "$default_exec" != "" ]]; then
					eval "$default_exec"
				fi
			else
				echoerr "ERROR: Invalid ITEM type"
			fi
		fi
	fi
done
